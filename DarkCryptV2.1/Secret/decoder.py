import base64
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.serialization import load_pem_private_key

def load_private_key(pem_path):
    with open(pem_path, 'rb') as pem_file:
        private_key = load_pem_private_key(pem_file.read(), password=None)
    return private_key

def decrypt_key(encrypted_key, private_key):
    # Decodificar el texto cifrado de base64 URL-safe
    encrypted_key = base64.urlsafe_b64decode(encrypted_key)

    # Desencriptar
    decrypted_key = private_key.decrypt(
        encrypted_key,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return decrypted_key.decode('utf-8')


pem_path = '../RSA/private_key.pem'
file_path = 'keys.txt'

private_key = load_private_key(pem_path)

with open(file_path, 'r') as file:
    lines = file.read()

# Procesar las claves
decoded_result = []
for line in lines.splitlines():
    encrypted_key, fecha = line.split(": [")
    fecha = fecha.replace("]", "")
    decrypted_key = decrypt_key(encrypted_key.strip(), private_key)
    decoded_result.append(f'{decrypted_key}  :  {fecha}')

with open('decoded_keys.txt', 'w') as f:
    for entry in decoded_result:
        f.write(entry + '\n')
